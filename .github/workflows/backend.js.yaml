# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node CI for the backend

on:
  push:
    branches: [ develop, master ]
    paths: [ 'yarn.lock', 'backend/**', '.github/workflows/backend.js.yaml' ]
  pull_request:
    branches: [ develop, master ]
    paths: [ 'yarn.lock', 'backend/**', '.github/workflows/backend.js.yaml' ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 14.x, 15.x ]
        yarn-workspace: [ '@csh/deadass-backend' ]

    steps:
      - uses: actions/checkout@v2

      - name: Cache words.txt
        id: cache-words
        uses: actions/cache@v2.1.3
        with:
          path: "backend/words.txt"
          key: "always"

      - name: Create words.txt
        run: >
          sudo apt-get update
          && sudo apt-get -y install --no-install-recommends wamerican
          && cat /usr/share/dict/words | grep -v "'" | awk '{ if (length($0) > 2) print tolower($0)}' | grep -Pv '[^\x00-\x7F]' | uniq > backend/words.txt
        if: steps.cache-words.outputs.cache-hit != 'true'


      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: "**/node_modules"
          key: ${{ matrix.node-version }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn workspace ${{ matrix.yarn-workspace }} install --frozen-lockfile

      - name: Lint
        run: yarn workspace ${{ matrix.yarn-workspace }} lint

      - name: Build
        run: yarn workspace ${{ matrix.yarn-workspace }} build

      - name: Test
        run: yarn workspace ${{ matrix.yarn-workspace }} test
